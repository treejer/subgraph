type Counter @entity {
  id: ID!
  treeUpdates: BigInt!
  bid: BigInt!
  RegularRequest: BigInt!
  assignedFunds: BigInt!
  dme: BigInt!
  planterPayments: BigInt!
  withdraws: BigInt!
  treeFund: BigInt!
  treeSpecs: BigInt!
  communityGift: BigInt!
  treeHistory: BigInt!
  addressHistory: BigInt!
}

type Planter @entity {
  id: ID!
  planterType: BigInt!
  status: BigInt!
  countryCode: String!
  score: BigInt!
  supplyCap: BigInt!

  longitude: BigInt!
  latitude: BigInt!
  memberOf: Planter
  members: [Planter!] @derivedFrom(field: "memberOf")
  invitedBy: Planter
  refferers: [Planter!] @derivedFrom(field: "invitedBy")
  organizationShare: BigInt!
  memberCount: BigInt!
  invitedCount: BigInt!
  balance: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  trees: [Tree!] @derivedFrom(field: "planter")

  plantedCount: BigInt!
  verifiedPlantedCount: BigInt!
  totalOrganizationPlantedCount: BigInt!
  totalOrganizationVerifiedPlantedCount: BigInt!
  regularPlantedCount: BigInt!
  regularVerifiedPlantedCount: BigInt!
  organizationRegularPlantedCount: BigInt!
  organizationRegularVerifiedPlantedCount: BigInt!
}

type Tree @entity {
  id: ID!
  planter: Planter
  funder: Funder
  owner: Owner
  species: BigInt!
  countryCode: String!
  saleType: BigInt!
  soldType: BigInt!
  treeStatus: BigInt!
  plantDate: BigInt!
  birthDate: BigInt!
  attribute: Attribute
  symbol: Symbol
  lastUpdate: TreeUpdate
  treeUpdates: [TreeUpdate!] @derivedFrom(field: "tree")
  treeHistories: [TreeHistory!] @derivedFrom(field: "tree")
  auctions: [Auction!] @derivedFrom(field: "tree")
  honoraryTree: HonoraryTree
  treeSpecs: String!
  treeSpecsEntity: TreeSpec
  requestId: String!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type HonoraryTree @entity {
  id: ID!
  tree: Tree!
  recipient: HonoraryTreeRecipient
  claimed: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type HonoraryTreeRecipient @entity {
  id: ID!
  expiryDate: BigInt!
  startDate: BigInt!
  status: BigInt!
  claimedFailed: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
}


type TreeHistory @entity {
  id: ID!
  tree: Tree!
  event: String!
  from: String!
  transactionHash: String!
  blockNumber: BigInt!
  value: BigInt!
  createdAt: BigInt!
}

type AddressHistory @entity {
  id: ID!
  address: String!
  event: String!
  from: String!
  transactionHash: String!
  blockNumber: BigInt!
  type: String!
  typeId: String!
  value: BigInt!
  count: BigInt!
  createdAt: BigInt!
}

type TreeSpec @entity {
  id: ID!
  tree: Tree
  tempTree: TempTree
  name: String!
  description: String!
  externalUrl: String!
  imageFs: String!
  imageHash: String!
  symbolFs: String!
  symbolHash: String!
  # description: String!
  animationUrl: String!
  diameter: String!
  latitude: String!
  longitude: String!
  attributes: String!
  updates: String!
  nursery: String!
  locations: String!
}

type TreeUpdate @entity {
  id: ID!
  tree: Tree!
  updateStatus: BigInt!
  updateSpecs: String!
  updateSpecEntity: UpdateSpec
  createdAt: BigInt!
  updatedAt: BigInt!
}

type UpdateSpec @entity {
  id: ID!
  treeUpdate: TreeUpdate!
  updates: String!
  longitude: String!
  latitude: String!
  nursery: String!
  locations: String!
}

type TempTree @entity {
  id: ID!
  planter: Planter!
  countryCode: String!
  status: BigInt!
  plantDate: BigInt!
  birthDate: BigInt!
  treeSpecs: String!
  treeSpecsEntity: TreeSpec
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Funder @entity {
  id: ID!
  trees: [Tree!] @derivedFrom(field: "funder")
  treeCount: BigInt!
  spentWeth: BigInt!
  spentDai: BigInt!
  rank: BigInt!
  lastRequestId: String!
  auctionCount: BigInt!
  regularCount: BigInt!
  marketPlaceCount: BigInt!
  marketPlaceSpent: BigInt!

  incrementalCount: BigInt!
  auctionSpent: BigInt!
  incrementalSpent: BigInt!
  regularSpent: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Owner @entity {
  id: ID!
  trees: [Tree!] @derivedFrom(field: "owner")
  treeCount: BigInt!
  regularTreeCount: BigInt!
  genesisTreeCount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Referrer @entity {
  id: ID!
  claimableTreesDai: BigInt!
  claimableTreesWeth: BigInt!
  referrerCount: BigInt!
  claimedCount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Auction @entity {
  id: ID!
  tree: Tree!
  initialPrice: BigInt!
  priceInterval: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  winner: Funder
  highestBid: BigInt!
  isActive: Boolean
  bids: [Bid!] @derivedFrom(field: "auction")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Bid @entity {
  id: ID!
  auction: Auction
  bidder: String!
  bid: BigInt!
  createdAt: BigInt!
}



type Attribute @entity {
  id: ID!
  tree: Tree
  attribute1: BigInt!
  attribute2: BigInt!
  attribute3: BigInt!
  attribute4: BigInt!
  attribute5: BigInt!
  attribute6: BigInt!
  attribute7: BigInt!
  attribute8: BigInt!
  generationType: BigInt!
  createdAt: BigInt!
}

type Symbol @entity {
  id: ID!
  tree: Tree
  shape: BigInt!
  trunkColor: BigInt!
  crownColor: BigInt!
  effect: BigInt!
  coefficient: BigInt!
  generationType: BigInt!
  createdAt: BigInt!
}


type TreeWithAttributeProblem @entity {
  id: ID!
  tree: Tree
  createdAt: BigInt!
}

type IncrementalSale @entity {
  id: ID!
  startTree: Tree!
  endTree: Tree!
  startTreeId: BigInt!
  endTreeId: BigInt!
  initialPrice: BigInt!
  increments: BigInt!
  priceJump: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# # type BatchRegularTreeRequest @entity {
# #   id: ID!
# #   count: BigInt
# #   buyer: Funder!
# #   amount: BigInt
# #   trees: [Tree!]
#     createdAt: BigInt!
# # }

type Allocation @entity {
  id: ID!
  planterShare: BigInt!
  ambassadorShare: BigInt!
  researchShare: BigInt!
  localDevelopmentShare: BigInt!
  insuranceShare: BigInt!
  treasuryShare: BigInt!
  reserve1Share: BigInt!
  reserve2Share: BigInt!
  exists: BigInt!
  createdAt: BigInt!
}

type AssignedAllocation @entity {
  id: ID!
  allocation: Allocation
}

type TotalFund @entity {
  id: ID!
  planter: BigInt!
  referral: BigInt!
  research: BigInt!
  localDevelopment: BigInt!
  insurance: BigInt!
  treasury: BigInt!
  reserve1: BigInt!
  reserve2: BigInt!
  totalBalance: BigInt!
}

type TreeFund @entity {
  id: ID!
  tree: Tree!
  allocation: Allocation
  amount: BigInt!
  updatedAt: BigInt!
  createdAt: BigInt!
}

type AllocationError @entity {
  id: ID!
  description: String!
  createdAt: BigInt!
}

type PlanterPayment @entity {
  id: ID!
  tree: Tree!
  planter: Planter!
  amount: BigInt!
  isRefferal: Boolean!
  createdAt: BigInt!
}

type Withdraw @entity {
  id: ID!
  type: String!
  reason: String!
  destAddress: String!
  amount: BigInt!
  transactionHash: String!
  createdAt: BigInt!
}

type TreePlanterFinance @entity {
  id: ID!
  planterFund: BigInt!
  referalFund: BigInt!
  planterPaid: BigInt!
  refferalPaid: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TotalPlanterFund @entity {
  id: ID!
  planterFund: BigInt!
  referalFund: BigInt!
  localDevelopFund: BigInt!
  totalBalance: BigInt!
}

type GlobalData @entity {
  id: ID!
  totalPlantedTrees: BigInt!
  totalVerifiedTrees: BigInt!
  totalUpdates: BigInt!
  totalVerifiedUpdates: BigInt!
  totalRegularTreesUnderReview: BigInt!
  totalRegularTreeSaleCount: BigInt!
  totalAuctionTreeSaleCount: BigInt!
  totalIncrementalSaleCount: BigInt!
  planterCount: BigInt!
  organizationCount: BigInt!
  independentPlanterCount: BigInt!
  funderCount: BigInt!
  ownedTreeCount: BigInt!
  totalRegularTreeSaleAmount: BigInt!
  totalAuctionTreeSaleAmount: BigInt!
  totalIncrementalSaleAmount: BigInt!
  totalMarketPlaceTreeSaleAmount: BigInt!
  totalMarketPlaceTreeSaleCount: BigInt!
  totalClaimedGiftTrees: BigInt!
  regularTreePrice: BigInt!
  lastIncrementalSold: BigInt!
  prevIncrementalPrice: BigInt!
  nowIncrementalPrice: BigInt!
  nextIncremetalPrice: BigInt!
  communityGiftPlanterFund: BigInt!
  communityGiftReferralFund: BigInt!
}

# type CommunityGifts @entity {
#   id: ID!
#   giftee: Funder!
#   symbol: BigInt
#   claimed: Boolean
#   treeId: Tree!
#   expireDate: BigInt
#   transferred: BigInt
#   transferAddress: Funder!
# }

type RegularRequest @entity {
  id: ID!
  funder: Funder
  count: BigInt!
  amount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}


type Model @entity {
  id: ID!
  planter: Planter!
  country: BigInt!
  species: BigInt!
  status: BigInt! # 1-can't buy but can plan && 2-finish model(plant and fund)
  price: BigInt!
  count: BigInt!
  start: BigInt!
  lastFund: BigInt!
  lastPlant: BigInt!
  lastReservePlant: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}
